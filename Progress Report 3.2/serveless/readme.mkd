https://github.com/Fellypezz/Blockchain-Apprentice-Compass-UOL.git# Serverlesspresso

- Serverlesspresso é uma cafeteria temporária que oferece bebidas de café espresso premium em conferências e eventos. Os organizadores trouxeram uma equipe de elite dos melhores baristas do mundo para preparar 1.000 bebidas por dia para os clientes.

- Nosso trabalho hoje é ajudar a construir uma aplicação serverless para ajudá-los a aceitar pedidos e notificar os clientes quando suas bebidas estiverem prontas. Precisamos construir uma solução robusta que escale para atender à demanda, gerencie o fluxo de trabalho das bebidas individuais e autentique nossos apreciadores de café.

## Como funciona o bar de café?
- O processo de pedidos do bar de café é o seguinte:

1. Monitores de projeção exibem um código QR que muda a cada 5 minutos. Os clientes escaneiam este código QR para fazer um pedido usando seus dispositivos móveis. O código QR é válido para 10 bebidas no período de 5 minutos e desaparece da tela quando não há mais bebidas disponíveis. Isso ajuda a evitar que os baristas fiquem sobrecarregados com pedidos!

2. O cliente faz o pedido no aplicativo da web carregado pelo código QR. O backend valida o pedido, cria um número de pedido e o torna disponível para os baristas.

3. Os baristas veem o pedido aparecer em seu próprio aplicativo. Eles podem alterar o status do pedido para indicar quando está sendo preparado, quando está concluído ou se precisam cancelar o pedido.

4. O cliente vê todas as atualizações dos baristas em seu dispositivo móvel. Os monitores de projeção também mostram o status das bebidas que estão por vir e das concluídas.

## Estrutura da Aplicação
- Você estará criando vários microsserviços que integram os frontends existentes com sua aplicação backend serverless. Você usará AWS Step Functions para lidar com a orquestração e Amazon EventBridge para lidar com a coreografia.

## Frontends
- Os frontends já estão implantados. Depois de construir o backend, você fornecerá variáveis de ambiente para os frontends para permitir que eles se conectem. Os três frontends são:

- **Aplicativo de Exibição:** Exibido nos monitores de projeção. Fornece um código de barras para os clientes escanearem e fazerem um pedido, e mostra uma fila em tempo real de pedidos de bebidas que estão por vir e concluídos.

- **Aplicativo de Barista:** Executado em tablets usados pelos baristas. Permite que os baristas alterem o status de um pedido de bebida ou cancelem o pedido, se necessário. As atualizações deste aplicativo são propagadas para os outros aplicativos.

- **Aplicativo de Pedidos:** Usado pelos clientes para fazer pedidos. Projetado para rodar em dispositivos móveis. Quando você estiver testando hoje, usará seu dispositivo móvel com este aplicativo para fazer pedidos.

## Backend
- A arquitetura da aplicação backend utiliza AWS Step Functions, Amazon EventBridge, AWS Lambda, Amazon API Gateway, Amazon S3, Amazon DynamoDB e Amazon Cognito.

- O JavaScript é executado no aplicativo de navegador frontend, enviando e recebendo dados de uma API backend construída com API Gateway. O DynamoDB provê uma camada de armazenamento de dados persistente utilizada pela API. Eventos são encaminhados de volta para os aplicativos frontend através do AWS IoT Core e Lambda.

# Módulos

| Módulo # | Recurso                              | Descrição                                                                                   |
|----------|--------------------------------------|-----------------------------------------------------------------------------------------------|
| Intro    | Introdução                           | Conheça sobre a aplicação Serverlesspresso.                                                   |
| Setup    | Configuração                         | Pré-requisitos, requisitos e configuração do ambiente de desenvolvimento AWS Cloud9.         |
| 1a       | Construindo o fluxo de trabalho - Parte 1 | Comece a construir o fluxo de trabalho com Step Functions.                                   |
| 1b       | Construindo o fluxo de trabalho - Parte 2 | Conclua e teste o fluxo de trabalho.                                                         |
| 2        | Roteamento de eventos com EventBridge | Utilize eventos para comunicação entre diferentes microsserviços.                            |
| 3        | Configurar os frontends              | Desenvolva um serviço que mantenha uma conexão websocket aberta para enviar atualizações em tempo real para os frontends. |

## Diagrama da Arquitetura

![Diagrama de Arquitetura](./imagens/diagrama1.png)

# Cleaning

Não se esqueça de apagar e limpar todos os passos após a finalização.